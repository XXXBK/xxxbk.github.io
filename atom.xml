<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-07-15T09:56:57.921Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XXXBK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Portainer容器管理实战：从镜像加速到安全部署</title>
    <link href="http://example.com/2025/07/15/Portainer%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%88%B0%E5%AE%89%E5%85%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2025/07/15/Portainer%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%88%B0%E5%AE%89%E5%85%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2025-07-15T09:50:31.000Z</published>
    <updated>2025-07-15T09:56:57.921Z</updated>
    
    <content type="html"><![CDATA[<p>一、背景：为什么选择从第三方镜像源拉取 Portainer？</p><p>近期在学习容器管理工具 Portainer 时，参考了一篇技术教程（知乎链接：<a class="link"   href="https://zhuanlan.zhihu.com/p/27740131259" >https://zhuanlan.zhi<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><a class="link"   href="https://zhuanlan.zhihu.com/p/27740131259" >hu<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><a class="link"   href="https://zhuanlan.zhihu.com/p/27740131259" >.com&#x2F;<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><a class="link"   href="https://zhuanlan.zhihu.com/p/27740131259" >p&#x2F;2<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><a class="link"   href="https://zhuanlan.zhihu.com/p/27740131259" >7740<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><a class="link"   href="https://zhuanlan.zhihu.com/p/27740131259" >1312<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><a class="link"   href="https://zhuanlan.zhihu.com/p/27740131259" >59<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>），教程中推荐使用官方镜像源部署。但由于网络环境限制，尝试从第三方镜像源<code>docker.1ms.run</code>拉取 Portainer 镜像，意外发现该镜像源提供了更稳定的下载速度，因此记录下完整操作流程，供遇到类似问题的开发者参考。</p><p>二、操作步骤：从镜像拉取到容器启动的全流程</p><h3 id="1-拉取-Portainer-镜像-xA"><a href="#1-拉取-Portainer-镜像-xA" class="headerlink" title="1. 拉取 Portainer 镜像&#xA;"></a>1. 拉取 Portainer 镜像&#xA;</h3><p>通常情况下，Portainer 官方镜像的拉取命令为：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure></div><p>但本次尝试使用第三方镜像源：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.1ms.run/portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure></div><p>执行结果：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Using default tag: latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">latest: Pulling from portainer/portainer-ce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">63c930229559: Pull complete&amp;#x20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d3b1c06ebf8c: Pull complete&amp;#x20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...（中间层拉取省略）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Digest: sha256:224a378fbc5ae579dc9d570c5ca2e5e981a4a003c8d7c2c5b5e482af97c2f87c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Status: Downloaded newer image for docker.1ms.run/portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure></div><p><strong>注意事项：</strong></p><ul><li><p>第三方镜像源可能存在安全风险，建议优先使用官方镜像（<code>portainer/portainer-ce</code>）。</p></li><li><p>若拉取失败，可检查镜像源是否可用（如执行<code>ping docker.1ms.run</code>），或切换至国内加速源（如 Docker 中国镜像站）。</p></li></ul><h3 id="2-验证镜像是否成功拉取-xA"><a href="#2-验证镜像是否成功拉取-xA" class="headerlink" title="2. 验证镜像是否成功拉取&#xA;"></a>2. 验证镜像是否成功拉取&#xA;</h3><p>通过<code>docker images</code>命令查看本地镜像列表：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></div><p>输出结果：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY                              TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line"></span><br><span class="line">docker.1ms.run/portainer/portainer-ce   latest    71de3839351a   2 days ago    268MB</span><br></pre></td></tr></table></figure></div><h3 id="3-启动-Portainer-容器-xA"><a href="#3-启动-Portainer-容器-xA" class="headerlink" title="3. 启动 Portainer 容器&#xA;"></a>3. 启动 Portainer 容器&#xA;</h3><p>使用以下命令启动容器，并配置挂载与端口映射：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \\</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20; \--name portainer \\</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20; -p 9000:9000 \\</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20; -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20; -v portainer\_data:/data \\</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20; \--restart=always \\</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20; docker.1ms.run/portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure></div><p><strong>参数解析：</strong></p><ul><li><p><code>-d</code>：后台运行容器；</p></li><li><p><code>-p 9000:9000</code>：映射宿主机 9000 端口到容器 9000 端口，用于访问 Web 界面；</p></li><li><p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>：挂载 Docker 套接字，允许 Portainer 管理宿主机 Docker 环境；</p></li><li><p><code>-v portainer_data:/data</code>：创建数据卷持久化存储 Portainer 配置；</p></li><li><p><code>--restart=always</code>：确保容器随系统重启自动运行。</p></li></ul><h3 id="4-访问-Portainer-Web-界面-xA"><a href="#4-访问-Portainer-Web-界面-xA" class="headerlink" title="4. 访问 Portainer Web 界面&#xA;"></a>4. 访问 Portainer Web 界面&#xA;</h3><p>容器启动后，在浏览器中输入<code>http://宿主机IP:9000</code>，首次访问需设置管理员密码，随后进入 Portainer 管理界面。</p><p>三、遇到的问题与解决方案</p><h3 id="1-镜像拉取失败：manifest-unknown-xA"><a href="#1-镜像拉取失败：manifest-unknown-xA" class="headerlink" title="1. 镜像拉取失败：manifest unknown&#xA;"></a>1. 镜像拉取失败：manifest unknown&#xA;</h3><p><strong>错误信息：</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: manifest for docker.1ms.run/portainer-ce:latest not found: manifest unknown</span><br></pre></td></tr></table></figure></div><p><strong>原因：</strong></p><p>镜像源中无该镜像，或镜像名称拼写错误（如<code>portainer-ce</code>写成<code>portainer</code>）。</p><p><strong>解决方法：</strong></p><p>确认镜像名称正确性，或更换为官方镜像源拉取：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure></div><h3 id="2-Docker-Hub-连接超时-xA"><a href="#2-Docker-Hub-连接超时-xA" class="headerlink" title="2. Docker Hub 连接超时&#xA;"></a>2. Docker Hub 连接超时&#xA;</h3><p><strong>错误信息：</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: context deadline exceeded</span><br></pre></td></tr></table></figure></div><p><strong>解决方法：</strong></p><p>配置国内镜像加速源，编辑<code>/etc/docker/daemon.json</code>添加：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20; &quot;registry-mirrors&quot;: \[&quot;https://registry.docker-cn.com&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>重启 Docker 服务：<code>sudo systemctl restart docker</code>。</p><p>四、使用第三方镜像源的风险与建议</p><ul><li><p><strong>安全风险</strong>：第三方镜像源可能被篡改，建议优先使用官方镜像（<code>portainer/portainer-ce</code>）。</p></li><li><p><strong>版本兼容性</strong>：第三方镜像可能非最新版本，建议定期通过<code>docker pull</code>更新镜像。</p></li><li><p><strong>网络稳定性</strong>：若第三方源频繁失效，优先使用官方源或国内大厂加速源（如阿里云、腾讯云镜像站）。</p></li></ul><p>五、总结：Portainer 的价值与容器管理实践</p><p>通过 Docker 部署 Portainer 后，可直观管理容器、镜像、网络及数据卷，尤其适合新手快速上手容器化部署。本次从第三方镜像源拉取的经历表明：技术实践中需在效率与安全性间权衡，建议在测试环境尝试非官方源，生产环境务必使用官方可信镜像。</p><p>后续可进一步探索 Portainer 的 Kubernetes 管理、RBAC 权限控制等高级功能，提升容器化应用的部署与运维效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、背景：为什么选择从第三方镜像源拉取 Portainer？&lt;/p&gt;
&lt;p&gt;近期在学习容器管理工具 Portainer 时，参考了一篇技术教程（知乎链接：&lt;a class=&quot;link&quot;   href=&quot;https://zhuanlan.zhihu.com/p/2774013</summary>
      
    
    
    
    <category term="Docker实践" scheme="http://example.com/categories/Docker%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="Portainer" scheme="http://example.com/tags/Portainer/"/>
    
    <category term="镜像加速" scheme="http://example.com/tags/%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/"/>
    
    <category term="容器管理" scheme="http://example.com/tags/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python 魔法：一键让 Excel 正确选项「脸红」</title>
    <link href="http://example.com/2025/07/15/Python-%E9%AD%94%E6%B3%95%EF%BC%9A%E4%B8%80%E9%94%AE%E8%AE%A9-Excel-%E6%AD%A3%E7%A1%AE%E9%80%89%E9%A1%B9%E3%80%8C%E8%84%B8%E7%BA%A2%E3%80%8D/"/>
    <id>http://example.com/2025/07/15/Python-%E9%AD%94%E6%B3%95%EF%BC%9A%E4%B8%80%E9%94%AE%E8%AE%A9-Excel-%E6%AD%A3%E7%A1%AE%E9%80%89%E9%A1%B9%E3%80%8C%E8%84%B8%E7%BA%A2%E3%80%8D/</id>
    <published>2025-07-15T09:21:07.000Z</published>
    <updated>2025-07-15T09:48:14.233Z</updated>
    
    <content type="html"><![CDATA[<p>在数据处理工作中，我们经常需要处理 Excel 文件中的试题数据，特别是需要对正确答案进行特殊标记。本文将分享我从最初实现到最终优化的完整改进过程。</p><p>初始需求</p><p>我们需要处理一个包含试题的 Excel 文件，具体要求：</p><ul><li><p>文件包含 “试题选项” 和 “试题答案” 两列</p></li><li><p>试题选项用 “$$;$“ 分隔多个选项</p></li><li><p>需要根据 “试题答案” 将正确答案标记为红色</p></li><li><p>处理后的结果直接修改原文件</p></li></ul><p>第一版实现</p><h3 id="核心思路：-xA"><a href="#核心思路：-xA" class="headerlink" title="核心思路：&#xA;"></a>核心思路：&#xA;</h3><ul><li><p>使用 pandas 读取 Excel 文件</p></li><li><p>用 openpyxl 修改原文件样式</p></li><li><p>在正确答案前后添加 “**“ 标记</p></li><li><p>提示用户手动替换 “**“ 为红色格式</p></li></ul><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">\# 主要处理逻辑</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">marked\_options = \[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i, option in enumerate(options):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   if i in correct\_indices:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       marked\_options.append(f&quot;\*\*&#123;option&#125;\*\*&quot;)  # 用\*\*标记正确答案</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   else:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       marked\_options.append(option)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cell.value = &#x27;\$;\$&#x27;.join(marked\_options)</span><br></pre></td></tr></table></figure></div><p><strong>问题：</strong></p><p>不能自动设置红色，需要用户手动替换，** 的标记方式不够直观</p><p>第二版改进</p><h3 id="改进点：-xA"><a href="#改进点：-xA" class="headerlink" title="改进点：&#xA;"></a>改进点：&#xA;</h3><ul><li><p>改用 xlsxwriter 引擎</p></li><li><p>直接处理 ** 标记的内容并设置为红色</p></li><li><p>保留 ** 标记</p></li></ul><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\# 使用正则匹配\*\*内容并设置格式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for match in re.finditer(r&#x27;\\\\\\\*\\\\\\\*(.\*?)\\\\\\\*\\\\\\\*&#x27;, cell\_value):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   parts.append(&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       &#x27;text&#x27;: f&quot;\*\*&#123;match.group(1)&#125;\*\*&quot;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       &#x27;format&#x27;: red\_format</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   &#125;)</span><br></pre></td></tr></table></figure></div><p><strong>问题：</strong></p><p>使用 ** 将正确答案括起来的话，xlsxwriter 无法非常准确地解析出来，因为答案可能是 <strong>A</strong>$;$B$;$C$;$<strong>D</strong> 这样子的，相同的符号会干扰它的判断，从而导致效果不好</p><p>最终版改进</p><h3 id="改进思路：-xA"><a href="#改进思路：-xA" class="headerlink" title="改进思路：&#xA;"></a>改进思路：&#xA;</h3><ul><li><p>改回使用 openpyxl</p></li><li><p>正确答案用 [] 标记</p></li><li><p>非正确答案不做标记</p></li></ul><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">marked\_options = \[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i, option in enumerate(options):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   if i in correct\_indices:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       marked\_options.append(f&quot;\[&#123;option&#125;]&quot;) # 正确答案标记</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   else:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       marked\_options.append(option)</span><br></pre></td></tr></table></figure></div><p>然后再进行标红处理：</p><ul><li><p>使用富文本 (CellRichText) 直接设置红色</p></li><li><p>自动移除 [] 标记</p></li><li><p>添加异常处理，失败时回退到普通文本</p></li><li><p>更友好的提示信息</p></li></ul><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">\# 富文本处理核心代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rich\_text = CellRichText()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i, option in enumerate(options):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   if i &gt; 0:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       rich\_text.append(&#x27;\$;\$&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   clean\_option = option.replace(&#x27;\[&#x27;, &#x27;&#x27;).replace(&#x27;]&#x27;, &#x27;&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   if i in correct\_indices:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       rich\_text.append(TextBlock(inline\_red\_font, clean\_option))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   else:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       rich\_text.append(clean\_option)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cell.value = rich\_text</span><br></pre></td></tr></table></figure></div><h3 id="关键改进点：-xA"><a href="#关键改进点：-xA" class="headerlink" title="关键改进点：&#xA;"></a>关键改进点：&#xA;</h3><ul><li><p><strong>富文本支持</strong>：使用 CellRichText 和 TextBlock 实现对单个字符的样式设置</p></li><li><p><strong>自动清理</strong>：移除选项中的 [] 标记</p></li></ul><p>拓展功能：标记检查与统一分隔符</p><p>在最终版的基础上，我进一步完善了代码，增加了两项重要的功能：统一处理非标准分隔符和全面的标记检查报告。这使得整个流程更加健壮和智能化。</p><h3 id="1-统一分隔符-xA"><a href="#1-统一分隔符-xA" class="headerlink" title="1. 统一分隔符&#xA;"></a>1. 统一分隔符&#xA;</h3><p>很多时候，Excel 中的选项分隔符可能不统一，除了标准的$;$，还可能出现$;、$$等，甚至单空格加 $ 等多种形式。为了确保选项能够被正确解析，我加入了强大的正则表达式来识别并统一这些非标准分隔符为 $;$。</p><p>实现方式：使用 re.compile 定义了一个详细的正则表达式 separator_pattern，涵盖了多种常见的非标准分隔符。</p><p>效果：在处理每个选项字符串时，首先使用 separator_pattern.sub (‘$;$’, options_str) 将所有识别到的非标准分隔符统一替换为 $;$ 。这大大提高了数据处理的鲁棒性，减少了因格式不一致导致的问题。</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">\# 正则表达式定义（部分）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">separator\_pattern = re.compile(r&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \$;\$|       # 标准 \$;\$ \[cite: 3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \$:：\$|   # \$:\$ 或 \$：\$ \[cite: 4]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   ;\$|         # ;\$ \[cite: 5]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \$；|        # \$； \[cite: 6]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \[；:：]\$|   # ；\$ 或 ：\$ \[cite: 7]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   $\[;；:：]|  # \$; 或 \$；或 \$: 或 \$： \[cite: 8]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \$\$|        # \$\$ \[cite: 9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \s&#123;2,&#125;|      # 两个或更多空格 \[cite: 10]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \$\s|\s\$|   # \$ 后或前有单个空格 \[cite: 11]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   ;           # 单独的分号 \[cite: 12]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;, re.VERBOSE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\# 在处理选项字符串时进行替换</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">modified\_str = separator\_pattern.sub(&#x27;\$;\$&#x27;, options\_str)</span><br></pre></td></tr></table></figure></div><h3 id="2-标记检查报告-xA"><a href="#2-标记检查报告-xA" class="headerlink" title="2. 标记检查报告&#xA;"></a>2. 标记检查报告&#xA;</h3><p>仅仅对正确答案进行标记是不够的，我们还需要验证标记是否正确、是否有遗漏。此功能可以生成详细的报告，指出 “正确答案未被标记” 和 “错误答案被标记” 的情况。</p><h4 id="核心逻辑优化：-xA"><a href="#核心逻辑优化：-xA" class="headerlink" title="核心逻辑优化：&#xA;"></a>核心逻辑优化：&#xA;</h4><ul><li><p><strong>未标记检查</strong>：传统的检查方法是看 “标记索引” 中是否包含正确答案的索引。但如果正确答案完全没有被标记（即选项中根本没有 []），这种方法就无法识别。新的逻辑直接检查正确答案的选项内容是否被 [] 包裹 。只要正确答案未被 [] 包裹，无论是否有其他标记动作，都会被识别为 “未标记” 。</p></li><li><p><strong>错误标记检查</strong>：检查所有被 [] 包裹的选项，如果其索引不在正确答案的索引列表中，则视为错误标记 。</p></li></ul><h4 id="输出报告：-xA"><a href="#输出报告：-xA" class="headerlink" title="输出报告：&#xA;"></a>输出报告：&#xA;</h4><p>生成清晰的报告，包含：</p><ul><li><p>检查的总行数 。</p></li><li><p>“未标记正确答案的行” 数量及具体详情（Excel 行号、应标记的字母、未被包裹的实际内容） 。</p></li><li><p>“错误标记的行” 数量及具体详情（Excel 行号、错误标记的内容、正确的答案） 。</p></li></ul><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">\# 未标记行检查的核心代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">has\_unmarked = False</span><br><span class="line"></span><br><span class="line">for i in correct\_indices:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   opt = options\[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \# 直接检查正确答案是否被\[]包裹&amp;#x20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   if not (opt.strip().startswith(&#x27;\[&#x27;) and opt.strip().endswith(&#x27;]&#x27;)):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       has\_unmarked = True</span><br><span class="line"></span><br><span class="line">&amp;#x20;       break</span><br><span class="line"></span><br><span class="line">if has\_unmarked: # \[cite: 16]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   unmarked\_rows.append(&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       &#x27;row&#x27;: row\_num,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       &#x27;expected&#x27;: \[chr(65 + i) for i in correct\_indices],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       &#x27;actual&#x27;: \[options\[i].strip() for i in correct\_indices]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\# 错误标记行检查的核心代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">marked\_indices = \[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i, opt in enumerate(options):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   if opt.strip().startswith(&#x27;\[&#x27;) and opt.strip().endswith(&#x27;]&#x27;):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       marked\_indices.append(i)  # 记录被标记的索引</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in marked\_indices: #&amp;#x20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   if i not in correct\_indices:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       wrong\_marking.append(&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;row&#x27;: row\_num,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;wrong\_marked&#x27;: options\[i].strip(),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;correct&#x27;: \[chr(65 + i) for i in correct\_indices] #&amp;#x20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       break # 只要有一个错误标记就记录</span><br></pre></td></tr></table></figure></div><h4 id="验证示例：-xA"><a href="#验证示例：-xA" class="headerlink" title="验证示例：&#xA;"></a>验证示例：&#xA;</h4><p>如果一个 Excel 行的正确答案是 D，但选项 D 没有被 [] 包裹，运行代码后会输出：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\=== 标记检查报告 ===</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">共检查 1000 行数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1\. 未标记正确答案的行: 1 行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20; 行X: 应标记\[&#x27;D&#x27;]（内容：D、财务收支审批人员的奖惩办法）未被\[]包裹</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2\. 错误标记的行: 0 行</span><br></pre></td></tr></table></figure></div><p>这使得我们能够精准识别 “应该标记但完全没标记” 的情况 。</p><blockquote><p>（注：文档部分内容可能由 AI 生成）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在数据处理工作中，我们经常需要处理 Excel 文件中的试题数据，特别是需要对正确答案进行特殊标记。本文将分享我从最初实现到最终优化的完整改进过程。&lt;/p&gt;
&lt;p&gt;初始需求&lt;/p&gt;
&lt;p&gt;我们需要处理一个包含试题的 Excel 文件，具体要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="Excel技巧" scheme="http://example.com/categories/Excel%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Python" scheme="http://example.com/categories/Excel%E6%8A%80%E5%B7%A7/Python/"/>
    
    <category term="数据处理" scheme="http://example.com/categories/Excel%E6%8A%80%E5%B7%A7/Python/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
    <category term="Excel处理" scheme="http://example.com/tags/Excel%E5%A4%84%E7%90%86/"/>
    
    <category term="Pandas" scheme="http://example.com/tags/Pandas/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Openpyxl" scheme="http://example.com/tags/Openpyxl/"/>
    
    <category term="Xlsxwriter" scheme="http://example.com/tags/Xlsxwriter/"/>
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的爬虫生活（一）：环境搭建与基础库应用</title>
    <link href="http://example.com/2025/07/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%88%AC%E8%99%AB%E7%94%9F%E6%B4%BB%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%BA%93%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2025/07/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%88%AC%E8%99%AB%E7%94%9F%E6%B4%BB%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%BA%93%E5%BA%94%E7%94%A8/</id>
    <published>2025-07-15T09:15:15.000Z</published>
    <updated>2025-07-15T09:17:26.827Z</updated>
    
    <content type="html"><![CDATA[<p>从零开始的爬虫生活（一）：环境搭建与基础库应用</p><p>一、环境搭建</p><p>在开始学习爬虫之前，我们需要先搭建好开发环境。以下是一些常用的工具和库：</p><h3 id="1-Python-环境-xA"><a href="#1-Python-环境-xA" class="headerlink" title="1. Python 环境&#xA;"></a>1. Python 环境&#xA;</h3><p>确保已经安装了 Python 3.x 版本。可以前往 <a class="link"   href="https://www.python.org/" >Python 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 下载安装。</p><h3 id="2-常用库安装-xA"><a href="#2-常用库安装-xA" class="headerlink" title="2. 常用库安装&#xA;"></a>2. 常用库安装&#xA;</h3><p>使用 pip 命令安装以下库：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install beautifulsoup4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install pyquery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install redis</span><br></pre></td></tr></table></figure></div><h3 id="3-浏览器驱动-xA"><a href="#3-浏览器驱动-xA" class="headerlink" title="3. 浏览器驱动&#xA;"></a>3. 浏览器驱动&#xA;</h3><ul><li><p><strong>ChromeDriver</strong>：根据你使用的 Chrome 浏览器版本，下载对应的 ChromeDriver。</p></li><li><p><strong>PhantomJS（已弃用）</strong>：在 Selenium 4.x 中已移除，建议使用无头模式的 Chrome。</p></li></ul><p><strong>配置 Chrome 无头模式示例：</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from selenium.webdriver.chrome.options import Options</span><br><span class="line"></span><br><span class="line">\# 配置 Chrome 为无头模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chrome\_options = Options()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chrome\_options.add\_argument(&quot;--headless&quot;)  # 无头模式，不显示浏览器窗口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\# 创建 Chrome 浏览器实例</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(options=chrome\_options)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.get(&quot;https://www.example.com&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(driver.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></div><p>二、基础库应用</p><h3 id="1-BeautifulSoup-库-xA"><a href="#1-BeautifulSoup-库-xA" class="headerlink" title="1. BeautifulSoup 库&#xA;"></a>1. BeautifulSoup 库&#xA;</h3><p>BeautifulSoup 是一个用于解析 HTML 和 XML 文档的库。<strong>示例：</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">html\_doc = &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\&lt;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \&lt;head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       \&lt;title&gt;示例页面\&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       \&lt;h1&gt;标题\&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       \&lt;p&gt;段落内容\&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html\_doc, &#x27;html.parser&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(soup.title.string)  # 输出标题内容</span><br></pre></td></tr></table></figure></div><h3 id="2-PyQuery-库-xA"><a href="#2-PyQuery-库-xA" class="headerlink" title="2. PyQuery 库&#xA;"></a>2. PyQuery 库&#xA;</h3><p>PyQuery 是一个类 jQuery 的 Python 库，用于操作 HTML 文档。<strong>示例：</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html\_doc = &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\&lt;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \&lt;head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       \&lt;title&gt;示例页面\&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       \&lt;h1&gt;标题\&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       \&lt;p&gt;段落内容\&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   \&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">doc = pq(html\_doc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(doc(&#x27;title&#x27;).text())  # 输出标题内容</span><br></pre></td></tr></table></figure></div><h3 id="3-Requests-库-xA"><a href="#3-Requests-库-xA" class="headerlink" title="3. Requests 库&#xA;"></a>3. Requests 库&#xA;</h3><p>Requests 是一个简单的 HTTP 库，用于发送网络请求。<strong>示例：</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = &quot;https://www.example.com&quot;</span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(response.text)  # 输出网页内容</span><br></pre></td></tr></table></figure></div><p>三、数据存储</p><h3 id="1-MySQL-数据库-xA"><a href="#1-MySQL-数据库-xA" class="headerlink" title="1. MySQL 数据库&#xA;"></a>1. MySQL 数据库&#xA;</h3><p>使用 PyMySQL 连接和操作 MySQL 数据库：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   host=&#x27;localhost&#x27;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   user=&#x27;root&#x27;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   password=&#x27;123456&#x27;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   port=3306,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   db=&#x27;mysql&#x27;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor.execute(&#x27;SELECT \* FROM db&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(cursor.fetchone())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></div><h3 id="2-MongoDB-数据库-xA"><a href="#2-MongoDB-数据库-xA" class="headerlink" title="2. MongoDB 数据库&#xA;"></a>2. MongoDB 数据库&#xA;</h3><p>使用 PyMongo 连接和操作 MongoDB 数据库：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(&#x27;localhost&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = client\[&#x27;newtestdb&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db\[&#x27;table&#x27;].insert\_one(&#123;&#x27;name&#x27;: &#x27;Bob&#x27;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = db\[&#x27;table&#x27;].find\_one(&#123;&#x27;name&#x27;: &#x27;Bob&#x27;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div><h3 id="3-Redis-数据库-xA"><a href="#3-Redis-数据库-xA" class="headerlink" title="3. Redis 数据库&#xA;"></a>3. Redis 数据库&#xA;</h3><p>使用 RedisPy 连接和操作 Redis 数据库：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = redis.Redis(&#x27;localhost&#x27;, 6379)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.set(&#x27;name&#x27;, &#x27;Bob&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = r.get(&#x27;name&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div><p>四、爬虫基本流程</p><p>爬虫的基本流程如下：</p><ol><li><p>发送请求：使用 Requests 库发送 HTTP 请求获取网页内容。</p></li><li><p>解析响应：使用 BeautifulSoup 或 PyQuery 库解析网页内容，提取所需数据。</p></li><li><p>保存数据：将提取的数据存储到数据库或文件中。</p></li></ol><p><strong>示例：爬取猫眼电影 TOP100</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">def get\_one\_page(url):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   headers = &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36 Edg/137.0.0.0&#x27;</span><br><span class="line"></span><br><span class="line">&amp;#x20;   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   if response.status\_code == 200:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       return response.text</span><br><span class="line"></span><br><span class="line">&amp;#x20;   return None</span><br><span class="line"></span><br><span class="line">def parse\_one\_page(html):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   pattern = re.compile(&#x27;\&lt;dd&gt;.\*?board-index.\*?&gt;(\d+)\&lt;/i&gt;.\*?data-src=&quot;(.\*?)&quot;.\*?name&quot;&gt;\&lt;a&#x27;</span><br><span class="line"></span><br><span class="line">&amp;#x20;                        \+ &#x27;.\*?&gt;(.\*?)\&lt;/a&gt;.\*?star&quot;&gt;(.\*?)\&lt;/p&gt;.\*?releasetime&quot;&gt;(.\*?)\&lt;/p&gt;&#x27;</span><br><span class="line"></span><br><span class="line">&amp;#x20;                        \+ &#x27;.\*?integer&quot;&gt;(.\*?)\&lt;/i&gt;.\*?fraction&quot;&gt;(.\*?)\&lt;/i&gt;.\*?\&lt;/dd&gt;&#x27;, re.S)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   items = re.findall(pattern, html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   for item in items:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       yield &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;index&#x27;: item\[0],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;image&#x27;: item\[1],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;title&#x27;: item\[2],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;actor&#x27;: item\[3].strip()\[3:],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;time&#x27;: item\[4].strip()\[5:],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;           &#x27;score&#x27;: item\[5] + item\[6]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write\_to\_file(content):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   with open(&#x27;result.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       f.write(json.dumps(content, ensure\_ascii=False) + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(offset):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   url = &#x27;http://maoyan.com/board/4?offset=&#x27; + str(offset)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   html = get\_one\_page(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   for item in parse\_one\_page(html):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;       write\_to\_file(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if \_\_name\_\_ == &#x27;\_\_main\_\_&#x27;:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   pool = Pool()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;#x20;   pool.map(main, \[i \* 10 for i in range(10)])</span><br></pre></td></tr></table></figure></div><p>五、动态网页处理</p><p>对于动态加载的网页，可以使用 Selenium 模拟浏览器操作。<strong>示例：</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.get(&#x27;https://www.taobao.com&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input = driver.find\_element(By.ID, &#x27;q&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input.send\_keys(&#x27;美食&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">button = driver.find\_element(By.CLASS\_NAME, &#x27;btn-search&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">button.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></div><p>六、爬虫框架</p><h3 id="1-Scrapy-框架-xA"><a href="#1-Scrapy-框架-xA" class="headerlink" title="1. Scrapy 框架&#xA;"></a>1. Scrapy 框架&#xA;</h3><p>Scrapy 是一个强大的爬虫框架，可以简化爬虫开发过程。<strong>安装命令：</strong></p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从零开始的爬虫生活（一）：环境搭建与基础库应用&lt;/p&gt;
&lt;p&gt;一、环境搭建&lt;/p&gt;
&lt;p&gt;在开始学习爬虫之前，我们需要先搭建好开发环境。以下是一些常用的工具和库：&lt;/p&gt;
&lt;h3 id=&quot;1-Python-环境-xA&quot;&gt;&lt;a href=&quot;#1-Python-环境-xA&quot; c</summary>
      
    
    
    
    <category term="爬虫教程" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python爬虫" scheme="http://example.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
    <category term="数据抓取" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96/"/>
    
    <category term="Selenium" scheme="http://example.com/tags/Selenium/"/>
    
    <category term="BeautifulSoup" scheme="http://example.com/tags/BeautifulSoup/"/>
    
    <category term="数据存储" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Dify镜像源替换与服务启动</title>
    <link href="http://example.com/2025/07/15/Dify-%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%EF%BC%9A%E9%95%9C%E5%83%8F%E6%BA%90%E6%9B%BF%E6%8D%A2%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/"/>
    <id>http://example.com/2025/07/15/Dify-%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%EF%BC%9A%E9%95%9C%E5%83%8F%E6%BA%90%E6%9B%BF%E6%8D%A2%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/</id>
    <published>2025-07-15T02:17:31.000Z</published>
    <updated>2025-07-15T09:18:07.980Z</updated>
    
    <content type="html"><![CDATA[<p>Dify 部署流程：镜像源替换与服务启动</p><p>一、Dify 镜像源替换操作</p><h3 id="批量替换镜像前缀-xA"><a href="#批量替换镜像前缀-xA" class="headerlink" title="批量替换镜像前缀&#xA;"></a>批量替换镜像前缀&#xA;</h3><p>在 docker-compose.yaml 所在目录执行全局替换，添加 docker.1ms.run&#x2F; 前缀：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/image: /image: docker.1ms.run\\//g&#x27; docker-compose.yaml</span><br></pre></td></tr></table></figure></div><h3 id="特殊镜像路径修正-xA"><a href="#特殊镜像路径修正-xA" class="headerlink" title="特殊镜像路径修正&#xA;"></a>特殊镜像路径修正&#xA;</h3><h4 id="问题路径-xA"><a href="#问题路径-xA" class="headerlink" title="问题路径&#xA;"></a>问题路径&#xA;</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: docker.1ms.run/docker.elastic.co/elasticsearch/elasticsearch:8.14.3</span><br></pre></td></tr></table></figure></div><h4 id="修正命令-xA"><a href="#修正命令-xA" class="headerlink" title="修正命令&#xA;"></a>修正命令&#xA;</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s|docker.1ms.run/docker.elastic.co/|docker.1ms.run/elastic/|g&#x27; docker-compose.yaml</span><br></pre></td></tr></table></figure></div><h4 id="正确路径-xA"><a href="#正确路径-xA" class="headerlink" title="正确路径&#xA;"></a>正确路径&#xA;</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: docker.1ms.run/elastic/elasticsearch:8.14.3</span><br></pre></td></tr></table></figure></div><h3 id="基础镜像补充替换-xA"><a href="#基础镜像补充替换-xA" class="headerlink" title="基础镜像补充替换&#xA;"></a>基础镜像补充替换&#xA;</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s|image: postgres:|image: docker.1ms.run/postgres:|g&#x27; docker-compose.yaml</span><br><span class="line"></span><br><span class="line">sed -i &#x27;s|image: redis:|image: docker.1ms.run/redis:|g&#x27; docker-compose.yaml</span><br><span class="line"></span><br><span class="line">sed -i &#x27;s|image: nginx:|image: docker.1ms.run/nginx:|g&#x27; docker-compose.yaml</span><br></pre></td></tr></table></figure></div><p>二、部署前准备工作</p><p>赋予挂载目录权限：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 ./volumes ./elasticsearch</span><br></pre></td></tr></table></figure></div><p>三、启动与验证 Dify 服务</p><h3 id="后台启动服务-xA"><a href="#后台启动服务-xA" class="headerlink" title="后台启动服务&#xA;"></a>后台启动服务&#xA;</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div><h3 id="验证服务状态-xA"><a href="#验证服务状态-xA" class="headerlink" title="验证服务状态&#xA;"></a>验证服务状态&#xA;</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps  # 检查容器运行状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker-compose logs -f  # 查看实时日志</span><br></pre></td></tr></table></figure></div><h3 id="访问-Dify-界面-xA"><a href="#访问-Dify-界面-xA" class="headerlink" title="访问 Dify 界面&#xA;"></a>访问 Dify 界面&#xA;</h3><p>浏览器输入 http:&#x2F;&#x2F; 服务器 IP:3000，默认账号 <a class="link"   href="mailto:&#97;&#100;&#x6d;&#105;&#x6e;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;" >admin@example.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，密码 password。</p><p>四、部署过程常见问题</p><h3 id="镜像路径嵌套错误-xA"><a href="#镜像路径嵌套错误-xA" class="headerlink" title="镜像路径嵌套错误&#xA;"></a>镜像路径嵌套错误&#xA;</h3><h4 id="问题-xA"><a href="#问题-xA" class="headerlink" title="问题&#xA;"></a>问题&#xA;</h4><p>镜像路径包含 docker.1ms.run&#x2F;docker.elastic.co&#x2F; 嵌套结构。</p><h4 id="解决-xA"><a href="#解决-xA" class="headerlink" title="解决&#xA;"></a>解决&#xA;</h4><p>使用 sed 精准替换：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s|docker.1ms.run/docker.elastic.co/|docker.1ms.run/elastic/|g&#x27; docker-compose.yaml</span><br></pre></td></tr></table></figure></div><h3 id="权限不足导致启动失败-xA"><a href="#权限不足导致启动失败-xA" class="headerlink" title="权限不足导致启动失败&#xA;"></a>权限不足导致启动失败&#xA;</h3><h4 id="问题-xA-1"><a href="#问题-xA-1" class="headerlink" title="问题&#xA;"></a>问题&#xA;</h4><p>挂载目录无读写权限。</p><h4 id="解决-xA-1"><a href="#解决-xA-1" class="headerlink" title="解决&#xA;"></a>解决&#xA;</h4><p>递归设置目录权限：</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 ./volumes</span><br></pre></td></tr></table></figure></div><h3 id="服务启动异常-xA"><a href="#服务启动异常-xA" class="headerlink" title="服务启动异常&#xA;"></a>服务启动异常&#xA;</h3><h4 id="解决-xA-2"><a href="#解决-xA-2" class="headerlink" title="解决&#xA;"></a>解决&#xA;</h4><p>通过日志排查问题：&#x20;</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f  # 查看所有服务日志</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker-compose logs dify-api  # 查看指定服务日志</span><br></pre></td></tr></table></figure></div><p>五、核心操作总结</p><h3 id="镜像替换流程-xA"><a href="#镜像替换流程-xA" class="headerlink" title="镜像替换流程&#xA;"></a>镜像替换流程&#xA;</h3><p>全局前缀替换 → 特殊镜像路径修正 → 基础镜像补充替换</p><h3 id="启动验证流程-xA"><a href="#启动验证流程-xA" class="headerlink" title="启动验证流程&#xA;"></a>启动验证流程&#xA;</h3><p>docker-compose up -d → docker-compose ps → 访问 Web 界面</p><h3 id="关键命令-xA"><a href="#关键命令-xA" class="headerlink" title="关键命令&#xA;"></a>关键命令&#xA;</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/image: /image: docker.1ms.run\\//g&#x27; docker-compose.yaml</span><br><span class="line"></span><br><span class="line">chmod -R 777 ./volumes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Dify 部署流程：镜像源替换与服务启动&lt;/p&gt;
&lt;p&gt;一、Dify 镜像源替换操作&lt;/p&gt;
&lt;h3 id=&quot;批量替换镜像前缀-xA&quot;&gt;&lt;a href=&quot;#批量替换镜像前缀-xA&quot; class=&quot;headerlink&quot; title=&quot;批量替换镜像前缀&amp;#xA;&quot;&gt;&lt;/a&gt;批</summary>
      
    
    
    
    <category term="Dify" scheme="http://example.com/categories/Dify/"/>
    
    
    <category term="Dify" scheme="http://example.com/tags/Dify/"/>
    
    <category term="镜像源" scheme="http://example.com/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    
  </entry>
  
</feed>
